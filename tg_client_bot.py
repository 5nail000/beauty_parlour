import time
import datetime
import telebot
from telebot import types
from environs import Env


env = Env()
env.read_env(override=True)
bot = telebot.TeleBot(env.str("TELEGRAM_CLIENT_BOT_API_TOKEN"))

EMPTY_CACHE = {
    'first_time': True,
    'office': False,
    'master': False,
    'procedure': False,
    'date': False,
    'time': False,
    'phone': False,
    'last_message_id': False
    }

TIMES = [
    '10:00', '10:30',
    '11:00', '11:30',
    '12:00', '12:30',
    '13:00', '13:30',
    '14:00', '14:30',
    '15:00', '15:30',
    '16:00', '16:30',
    '17:00', '17:30',
    '18:00', '18:30',
    '19:00', '19:30',
    '20:00', '20:30'
]

MASTERS = {
    1: {'id': 1, 'name': '–û–ª—å–≥–∞', 'procedure': '–°—Ç—Ä–∏–∂–∫–∞/—É–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å'},
    2: {'id': 2, 'name': '–¢–∞—Ç—å—è–Ω–∞', 'procedure': '–ú–∞–∫–∏—è–∂'}
}


def print_booking_text(user_data, not_confirmed=True):

    if not_confirmed:
        dialogue_text = ' ---- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–ø–∏—Å–∏ ----' + '\n\n'
    else:
        dialogue_text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å—å—é!' + '\n'
        dialogue_text += '===============================' + '\n\n'

    if user_data["procedure"]:
        dialogue_text += f'–°–µ—Ä–≤–∏—Å: {user_data["procedure"]}' + '\n'
    if user_data["master"]:
        dialogue_text += f'–ú–∞—Å—Ç–µ—Ä: {MASTERS[user_data["master"]]["name"]}' + '\n'
        dialogue_text += f'–£—Å–ª—É–≥–∞: {MASTERS[user_data["master"]]["procedure"]}' + '\n'
    if user_data["date"]:
        dialogue_text += f'–î–∞—Ç–∞: {user_data["date"]}' + '\n'
    if user_data["time"]:
        dialogue_text += f'–í—Ä–µ–º—è: {user_data["time"]}' + '\n'
    if user_data["phone"]:
        dialogue_text += f'–í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: {user_data["phone"]}' + '\n'

    dialogue_text += '\n'

    return dialogue_text


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ START
@bot.message_handler(commands=['start'])
def start_menu(message):
    if 'users' not in bot.__dict__.keys():
        bot.__dict__.update({'users': {}})
        bot.__dict__['users'].update({message.from_user.id: EMPTY_CACHE})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton(text='üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º'))
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BeautyCity!!!', reply_markup=markup)
    bot.register_next_step_handler(message, call_us)

    dialogue_text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:'
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    about_button = types.InlineKeyboardButton("–û –ù–∞—Å", callback_data='about')
    choose_master_button = types.InlineKeyboardButton("–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_master')
    choose_procedure_button = types.InlineKeyboardButton("–í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", callback_data='choose_procedure')

    markup_inline.add(about_button, choose_master_button, choose_procedure_button)
    bot.send_message(message.chat.id, dialogue_text, reply_markup=markup_inline)


def main_menu(message):
    user_data = bot.__dict__['users'][message.chat.id]
    dialogue_text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:'
    markup = types.InlineKeyboardMarkup(row_width=1)
    about_button = types.InlineKeyboardButton("–û –ù–∞—Å", callback_data='about')
    choose_master_button = types.InlineKeyboardButton("–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_master')
    choose_procedure_button = types.InlineKeyboardButton("–í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", callback_data='choose_procedure')
    send_feedback_button = types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏", callback_data='send_feedback')

    markup.add(about_button, choose_master_button, choose_procedure_button)
    if not user_data['first_time']:
        markup.add(send_feedback_button)
    bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):

    if 'users' not in bot.__dict__.keys():      # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è, —Ç–æ –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—ë—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        bot.__dict__.update({'users': {}})
        bot.__dict__['users'].update({call.message.chat.id: EMPTY_CACHE})
        start_menu(call.message)

    user_data = bot.__dict__['users'][call.message.chat.id]
    args = call.data.split('#')
    if len(args) > 1:
        if args[1] == 'cut_date': user_data['date'] = False
        if args[1] == 'cut_time': user_data['time'] = False
        if args[1] == 'cut_phone':
            user_data['phone'] = False
            user_data['time'] = False

    if call.data == 'main_menu': main_menu(call.message)
    if call.data == 'about': about(call.message)
    if call.data == 'choose_master': choose_master(call.message)
    if call.data.startswith('master'): choose_date(call.message, master=int(args[1]))
    if call.data.startswith('re_choose_date'): choose_date(call.message)
    if call.data.startswith('choose_time'): choose_time(call.message, args[1])
    if call.data.startswith('re_choose_time'): choose_time(call.message)
    if call.data.startswith('confirmation'): confirmation(call.message, args[1])

    if call.data.startswith('successful_booking'): successful_booking(call.message)

    if call.data == 'choose_procedure': choose_procedure(call.message)
    if call.data.startswith('procedure'): choose_date(call.message, procedure=int(args[1]))


def about(message):
    dialogue_text = '–°—Ç—É–¥–∏—è BeautyCity' + '\n'
    dialogue_text += 'Instagram: @BeautyCity' + '\n'
    dialogue_text += 'Vkontakte: vk.com/BeautyCity' + '\n'

    markup = types.InlineKeyboardMarkup(row_width=1)
    button_1 = types.InlineKeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç - beautycity.ru", url='https://www.beautycity.ru')
    button_back = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='main_menu')

    markup.add(button_1, button_back)
    bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)


def choose_master(message):
    dialogue_text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:'
    markup = types.InlineKeyboardMarkup(row_width=2)
    master_button_1 = types.InlineKeyboardButton("–û–ª—å–≥–∞", callback_data='master#1')
    master_button_2 = types.InlineKeyboardButton("–¢–∞—Ç—å—è–Ω–∞", callback_data='master#2')
    button_back = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='main_menu')

    markup.add(master_button_1, master_button_2, button_back)
    bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)


def choose_procedure(message):
    dialogue_text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:'
    markup = types.InlineKeyboardMarkup(row_width=2)
    procedure_1 = types.InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä", callback_data='procedure#1')
    procedure_2 = types.InlineKeyboardButton("–ú–∞—Å—Å–∞–∂", callback_data='procedure#2')
    button_back = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='main_menu')

    markup.add(procedure_1, procedure_2, button_back)
    bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)


def choose_date(message, master=None, procedure=None):

    user_data = bot.__dict__['users'][message.chat.id]
    if master:
        user_data.update({'master': master})
    else:
        master = user_data['master']

    if procedure:
        user_data.update({'procedure': procedure})
    else:
        procedure = user_data['procedure']

    buttons = []
    days = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
    today = datetime.datetime.now().date()
    days_to_end_of_next_week = 14 - today.weekday()

    for i in range(days_to_end_of_next_week):
        new_date = today + datetime.timedelta(days=i)
        formatted_date = f"{new_date.day:02d}.{new_date.month:02d} ({days[new_date.weekday()]})"
        buttons.append(types.InlineKeyboardButton(formatted_date, callback_data=f'choose_time#{formatted_date}'))

    dialogue_text = print_booking_text(user_data)
    dialogue_text += '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –í–∞–º –¥–µ–Ω—å:'

    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    markup.row(types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='choose_master'))
    bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)


def choose_time(message, date=None):

    user_data = bot.__dict__['users'][message.chat.id]
    if date:
        user_data.update({'date': date})
    else:
        date = user_data['date']

    dialogue_text = print_booking_text(user_data)
    dialogue_text += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:'

    markup = types.InlineKeyboardMarkup(row_width=4)
    buttons = []
    for item in TIMES:
        buttons.append(types.InlineKeyboardButton(item, callback_data=f'confirmation#{item}'))

    for i in range(0, len(buttons), 4):
        markup.add(*buttons[i:i+4])
    markup.row(types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='re_choose_date#cut_date'))
    bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)


def confirmation(message, time=None):

    user_data = bot.__dict__['users'][message.chat.id]
    if time:
        user_data.update({'time': time})
        user_data.update({'last_message_id': message.id})
    else:
        time = user_data['time']

    dialogue_text = print_booking_text(user_data)

    if user_data['first_time']:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.row(types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='re_choose_time#cut_time'))
        dialogue_text += '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç, —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.\n\n'
        dialogue_text += '–û—Ç–ø—Ä–∞–≤–ª—è—è –Ω–∞–º —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n'
        dialogue_text += '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ: www.confirmation.ru'
        bot.edit_message_text(dialogue_text, message.chat.id, message.id, reply_markup=markup)
        user_data['waiting_for_phone'] = True
        bot.register_next_step_handler(message, get_phone)
    else:
        print('Not_First')


def successful_booking(message):
    user_data = bot.__dict__['users'][message.chat.id]
    dialogue_text = print_booking_text(user_data, not_confirmed=False)
    bot.send_message(message.chat.id, dialogue_text)
    bot.delete_message(message.chat.id, user_data['last_message_id'])
    start_menu(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º" –≤ ReplyKeyboardMarkup
@bot.message_handler(content_types=['text'])
def call_us(message):
    user_data = bot.__dict__['users'][message.chat.id]
    if user_data.get('waiting_for_phone', False):
        get_phone(message)
    elif "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º" in message.text.lower():
        bot.send_message(message.chat.id, "–†–∞–¥—ã –∑–≤–æ–Ω–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è ‚Äì 8 800 555 35 35")
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º', —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.")


def get_phone(message):
    user_data = bot.__dict__['users'][message.chat.id]
    user_data.update({'phone': message.text})
    user_data['waiting_for_phone'] = False

    dialogue_text = print_booking_text(user_data)
    dialogue_text += f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏'

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.row(types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ó–∞–ø–∏—Å—å', callback_data='successful_booking'))
    markup.row(types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='re_choose_time#cut_phone'))
    try:
        bot.edit_message_text(dialogue_text, message.chat.id, user_data['last_message_id'], reply_markup=markup)
        bot.register_next_step_handler(message, get_phone)
        time.sleep(2)
        bot.delete_message(message.chat.id, message.id)
    except Exception as e:
        e


if __name__ == '__main__':
    bot.infinity_polling()
